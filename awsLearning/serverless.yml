service: awsLearning
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: serverlessUser
  stage: dev
  region: us-east-1
  deploymentBucket: aws-learning-basic
  role: arn:aws:iam::427071052786:role/lamda
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
  # iamRoleStatements:
  #   - Effects: Allow
  #     Action:
  #       - 'dynamodb:*'
  #       - 's3:*'
  #     Resource: '*'
  apiKeys:
    - MyFirstApiKey

plugins:
  - serverless-webpack
  - serverless-offline
  # - serverless-s3-sync

custom:
  tableName: myTestTable
  bucketName: learning-aws-bucket-s4
  # dynamodb:
  #   stages:
  #     - dev
  #   start:
  #     port: 8000
  #     inMemory: true
  #     migrate: true
  #   migration:
  #     dir: offline/migrations
  # s3Sync:
  #   - bucketName: l${self:custom.bucketName}
  #     localDir: UploadData

package:
  individually: true

functions:

  getUser:
    handler: lambdas/endPoint/getUser.handler
    events:
     - http:
         path: get-user/{ID}
         method: GET
  getOrg:
    handler: lambdas/endPoint/getOrg.handler
    events:
     - http:
         path: get-org/{orgId}
         method: GET
  getProjectByOrgId:
    handler: lambdas/endPoint/getProjectByOrgId.handler
    events:
     - http:
         path: get-project-orgId/{orgId}
         method: GET
  getAllUser:
    handler: lambdas/endPoint/getAllUser.handler
    events:
      - http:
          path: get-all-user
          method: GET
          # cors: true
          # private: true   # it is for API-KEY
  getPlayerScore:
    handler: lambdas/endPoint/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID}
          method: GET
  createPlayerScore:
    handler: lambdas/endPoint/createPlayerScore.handler
    events:
      - http:
          path: create-player/{ID}
          method: POST
  createWebhook:
    handler: lambdas/endPoint/createWebhook.handler
    events:
      - http:
          path: create-webhook
          method: POST
  createOrg:
    handler: lambdas/endPoint/createOrg.handler
    events:
      - http:
          path: create-org
          method: POST
  createLinkData:
    handler: lambdas/endPoint/createLinkData.handler
    events:
      - http:
          path: create-link-data
          method: POST
  createEmp:
    handler: lambdas/endPoint/createEmp.handler
    events:
      - http:
          path: create-emp
          method: POST
          # request:
            # schemas:
            #   application/json:
            #     schema: ${file(./lambdas/request_model/create_request.json)}
            #     name: PostCreateModel
            #     description: 'Validation model for Creating Posts'
  getEmployee:
    handler: lambdas/endPoint/getEmployee.handler
    events:
     - http:
         path: get-employee/{ID}
         method: GET
  updateEmp:
    handler: lambdas/endPoint/updateEmp.handler
    events:
     - http:
         path: update-employee/{ID}
         method: PUT
  deleteEmp:
    handler: lambdas/endPoint/deleteEmp.handler
    events:
     - http:
         path: delete-employee/{ID}
         method: DELETE
  queryEmp:
    handler: lambdas/endPoint/queryEmp.handler
    events:
     - http:
         path: query-employee
         method: GET
  createFile:
    handler: lambdas/endPoint/createFile.handler
    events:
      - http:
          path: create-file/{fileName}
          method: POST
  createProject:
    handler: lambdas/endPoint/createProject.handler
    events:
      - http:
          path: create-Project
          method: POST
  sendEmail:
    handler: lambdas/endPoint/sendEmail.handler
    events:
      - http:
          path: send-email
          method: POST
  layerTest:
    handler: lambdas/endPoint/layerTest.handler
    # layers:
    #   - arn:aws:lambda:us-east-1:427071052786:layer:logging:1
    events:
      - http:
          path: layer-test
          method: GET


resources:
  Resources:
    # usersTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: ${self:custom.tableName}
    #     AttributeDefinitions:
    #       - AttributeName: ID
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: ID
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
          
    # DemoBucketUpload:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: ${self:custom.bucketName}

    # CognitoUserPool:
    #   Type: AWS::Cognito::UserPool
    #   Properties:
    #     UserPoolName: ${self:provider.stage}-user-pool
    #     UsernameAttributes:
    #       - email
    #     AutoVerifiedAttributes:
    #       - email
    # CognitoUserPoolClient:
    #   Type: AWS::Cognito::UserPoolClient
    #   Properties:
    #     ClientName: ${self:provider.stage}-user-pool-client
    #     UserPoolId:
    #       Ref: CognitoUserPool
    #     ExplicitAuthFlows:
    #       - ADMIN_NO_SRP_AUTH
    #     GenerateSecret: false
